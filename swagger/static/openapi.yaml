openapi: 3.0.0
info:
  version: 0.0.1
  title: Flask RestAPI
  description: >
    A Python web server that provides login/register rest api functionalities based on Flask freamwork.

servers:
  - url: http://localhost:5000

paths:
  /system/health:
    get:
      tags:
        - System
      summary: System health status
      operationId: systemHealth
      responses:
        "200":
          description: System health status
          content:
            text/plain:
              schema:
                type: string
                example: SERVER IS UP!
  /system/info:
    get:
      tags:
        - System
      summary: System detail information
      operationId: systemInfo
      responses:
        "200":
          description: System related information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"

  /auth/login:
    post:
      tags:
        - Auth
      summary: User login.
      operationId: login
      requestBody:
        description: Login required fields
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: email or password does not match
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/register:
    post:
      tags:
        - Auth
      summary: New user registeration.
      operationId: register
      requestBody:
        description: Register required fields
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterPayload"
      responses:
        "200":
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          description: User already exists
  /auth/logout:
    get:
      security:
        - bearerAuth: []
      tags:
        - Auth
      summary: User logout.
      operationId: logout
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        "401":
          description: Token blacklisted or expired or invalid
        "403":
          description: Provide a valid auth token
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Gets a list of users.
      operationId: listUsers
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [user, admin]
          required: true
          example: user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Add a new user.
      operationId: addUser
      requestBody:
        description: New user required fields
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserPayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "409":
          description: User already exists
  /users/{public_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Gets a user by public id.
      operationId: getUserById
      parameters:
        - name: public_id
          in: path
          description: User public id
          example: 5fb64a5a-afb3-4119-8eba-1a222978de8e
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: A user with the specified public_id was not found

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: An expected error
  schemas:
    SystemInfo:
      type: object
      properties:
        version:
          type: string
          example: 0.0.1
        build_platform:
          type: string
          example: macosx-14-arm64
        environment:
          type: string
          enum:
            - dev
            - test
            - prod
          example: dev
        timestamp:
          type: string
          example: 23/05/2024, 10:17:32
    LoginPayload:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: pass123
      required:
        - email
        - password
    RegisterPayload:
      type: object
      properties:
        username:
          type: string
          example: Test User
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: pass123
      required:
        - username
        - email
    Response:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        data:
          type: object
      required:
        - message
        - status
    User:
      type: object
      properties:
        public_id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        is_admin:
          type: boolean
        is_confirmed:
          type: boolean
      required:
        - username
        - email
        - is_admin
        - is_confirmed
    NewUserPayload:
      type: object
      properties:
        username:
          type: string
          example: Test User
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: pass123
      required:
        - username
        - email
        - password
